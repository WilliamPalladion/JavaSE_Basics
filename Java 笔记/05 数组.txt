05 数组

# 数组：用来存储一批同种类型数据的内存区域（i.e. 容器）

int[] arr = {20, 10, 80}
String[] names = {"西门", "东门"}

# 大量变量的定义会让代码非常繁琐，业务功能实现麻烦 -> 数组
# 数组适合做一批同种类型数据的存储

# Content:
# 定义数组、操作数组元素(获取，修改)、利用数组解决实际问题、数组内存原理、数组注意点



5.1 定义数组

5.1.1 静态初始化数组

# 静态初始化数组：定义数组的时候直接给数组赋值

# 完整格式: Type[] Name = new Type[] {element1, element2, ...};

e.g. double[] scores = new double[] {89.9, 99.5, 98.6};
     int[] ages = new int[] {12, 24, 36};

# 简化格式: Type[] Name = {element1, element2, ...};	 

e.g. int[] ages = {12, 24, 36};


# 底层原理

e.g. int[] ages = {12, 24, 36};

# 首先在内存中开辟一块区域存数组变量 ages, 然后 new 方法创建一个对象{12, 24, 36}
# 这块区域在内存中会有自己的地址 [D@776ec8df 然后把这个数组地址交给数组变量 ages 存储
# 然后数组变量就会根据这个地址来寻找这个对象 (首地址)

e.g. [D@776ec8df ( [ 代表数组，D 代表double类型，@ 表示地址在哪里，后面跟16进制的地址)

# Note: 数组变量名中存储的是数组在内存中的地址，数组是引用类型 (装的是地址，基本数据类型里装的是数据)



# 数组的访问

Name[Index]: index从0开始

# 长度length属性：arr.length

# 最大索引：arr.length - 1 (前提是数组不为空)

Note:
1) Type[] Name 也可以写成 Type Name[]
2) 什么类型的数组放什么类型的数据
3) 数组一旦定义出来，那么程序执行的过程中，长度、类型就固定了


5.1.2 动态初始化数组

# 动态初始化数组：定义数组时只确定元素的类型和数组的长度，之后再存入具体数据
# 底层原理与静态初始化类似，但开始时对象中只存储一些默认值 (int -> 0)

Type[] Name = new Type[length];

e.g. int[] arr = new int[3];

arr[0] = 10; // 后赋值


# 当前已经知道存入的元素值 -> 静态初始化
# 当前不知道存入的元素值 -> 动态初始化


# 动态初始化默认值

基本类型：byte/short/int/long, char  -> 0
          float, double -> 0.0
		  boolean -> false

引用类型：类，接口，数组，String -> null



5.2 数组遍历

int[] arr = {12, 24, 12, 48, 98};

for (int i = 0; i < arr.length; i++) {
    System.out.println(arr[i]);
}
// arr.fori 数组遍历快捷键


# 数组排序

排序技术：冒泡排序、选择排序、快速排序、插入排序、...
数组搜索技术：二分搜索、分块查找、哈希表查找、...

# 冒泡排序：每次找出数组中的最大值放到数组的后面去

# 确定需要做几轮：数组长度 - 1
  每一轮比较几次：i轮比较 (数组长度 - i) 次
  
  
  
5.3 数组内存图

# Java 内存分配
栈、堆、方法区、本地方法栈、寄存区

方法区：字节码文件加载时进入的内存(xx.class文件)
栈内存：方法运行时所进入的内存(main,...), 变量也在这里
堆内存：new产生的对象会在这块内存中开辟空间并产生地址


# 两个数组变量指向同一个数组对象
int[] arr1 = {11, 22, 33};
int[] arr2 = arr1; // 赋值给的是数组的地址

System.out.println(arr1); // [I@4eec7777
System.out.println(arr2); // [I@4eec7777

arr2[1] = 99;
System.out.println(arr1[1]); // 99
System.out.println(arr2[1]); // 99


# 数组常见问题

1) 索引超过最大索引：ArrayIndexOutOfBoundsException
2) 如果数组变量没有存储数组的地址，而是null, 在访问数组信息(index, length, etc)时会出现NullPointerException (空指针异常)

