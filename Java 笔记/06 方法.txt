06 方法

# 方法：一种语法结构，可以把一段代码封装成一个功能，方便重复调用
# 提高代码的复用性，程序逻辑更清晰

// main 方法
public static void main(String[] args){
}

// 定义一个求和方法
public static int sum(int a, int b){
	int c = a + b;
	return c
}

# Content:
# 定义方法、调用方法、方法的内存图、方法的参数传递机制、方法其他常见形式/技术


6.1 定义方法

修饰符 返回值类型 方法名(形参列表){
	方法体代码
	return 返回值;
}

public static int sum(int a, int b){
	int c = a + b;
	return c
}

# Note:
# 方法必须调用才能跑起来：方法名(...);
# 方法的修饰符：我们暂时只用 public static 修饰
# 方法申明了具体的返回值类型，内部必须使用return返回对应类型的数据
# 形参列表可以有多个(,隔开)，甚至可以没有；但不可以给初始化值！！



# 方法的其他定义写法

# 方法定义时，返回值类型、形参列表可以按照需求进行填写

e.g. 打印三行 Hello World
public static void print(){
	System.out.println("Hello World");
	System.out.println("Hello World");
	System.out.println("Hello World");
}

# void：无返回值类型

Note:
如果方法不需要返回结果，返回值类型必须申明为 void (无返回值类型)，
此时方法内部不可以使用 return 返回数据


# 方法的注意事项
1) 方法的编写顺序无所谓

2) 方法与方法之间是平级关系，不能嵌套定义 (i.e. 不可以把一个方法放在另一个方法的内部定义)

3) 方法的返回值类型为 void 则方法内部不能再用return返回数据；
   如果返回值类型有具体类型，则内部必须return具体类型

4) return 下方不写代码，因为永远执行不到 (Unreachable)

5) 方法不调用就不执行，调用一定要严格匹配参数

6) 有返回值的方法调用可以定义变量接受，或者直接输出调用，甚至直接调用；
   无返回值的方法只能直接调用！！
   
   


6.2 方法调用的内存图

方法没有被调用时，在 方法区 中的字节码文件中存放
方法被调用时，需要进入到 栈内存 中运行

e.g. 子弹 -> 弹夹(方法区) -> 膛室 (栈内存运行)

e.g. 
public class Test{
	public static void main(String[] args){
		int sum = add(10, 20);
		System.out.println(sum);
	}

	public static int add(int a, int b){
		int c = a + b;
		return c;
	}
}

方法区：Test.class (main, add) -> 栈内存
# 先在栈内存中执行 main 方法，遇到 int sum = add(10, 20)
# 开始寻找 add 方法，把add方法加载到栈内存中运行
# 把10和20在add方法开辟的空间内传给a, b
# 执行完后把返回值30传给sum变量， add方法从栈内存中退出
# 输出sum后main方法也从栈内存中退出




6.3 方法的参数传递机制

# 基本类型的参数传递、引用类型的参数传递

# Java的参数传递机制：值传递
在传输实参给方法的形参的时候，并不是传输实参变量本身，而是实参中存储的值(值传递)

# 实参：在方法内部定义的变量 
  形参：在定义方法时， "()" 中所声明的参数 (e.g. String[] args)
  
# 引用类型的参数传递
引用类型传递的就是数组的地址了，所以形参也是根据地址去访问数组，它的变化也会影响实参




6.4 方法重载

# 方法重载：
同一个类中，出现多个方法名称相同，但是形参列表不同，那么这些方法就是重载方法

# Case：开发武器系统有如下功能
1) 可以默认发射一枚武器
2) 可以指定地区发射一枚武器
3) 可以指定地区发射多枚武器

# 调用方法时，会根据参数的不同来区分调用的是哪个方法

# 方法重载的作用：
可读性好，方法名称相同提示是同一类型的功能，通过形参不同实现功能差异化的选择，是一种专业的代码设计


# 方法重载的识别技巧

1）只要是同一个类中，方法名称相同、形参列表不同，那就是重载的方法，其他都不管！
   (e.g. 修饰符，返回值类型都无所谓！) 

2）形参列表不同指的是：形参的个数、类型、顺序不同，不关心形参的名称

# 以下两个是重载方法（顺序不同）
public static void open(double a, int b){}
public static void open(int a, double b){}




6.5 return 关键字单独使用

# return; 可以立即跳出并结束当前方法的执行
# return关键字单独使用可以放在任何方法中
